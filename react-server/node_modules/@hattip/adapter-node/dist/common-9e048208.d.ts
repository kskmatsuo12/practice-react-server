import { HattipHandler } from '@hattip/core';
import { IncomingMessage, ServerResponse, ServerOptions, Server } from 'node:http';
import { Socket } from 'node:net';

interface PossiblyEncryptedSocket extends Socket {
    encrypted?: boolean;
}
/**
 * `IncomingMessage` possibly augmented by Express-specific
 * `ip` and `protocol` properties.
 */
interface DecoratedRequest extends Omit<IncomingMessage, "socket"> {
    ip?: string;
    protocol?: string;
    socket?: PossiblyEncryptedSocket;
}
/** Connect/Express style request listener/middleware */
type NodeMiddleware = (req: DecoratedRequest, res: ServerResponse, next?: () => void) => void;
/** Adapter options */
interface NodeAdapterOptions {
    /**
     * Set the origin part of the URL to a constant value.
     * It defaults to `process.env.ORIGIN`. If neither is set,
     * the origin is computed from the protocol and hostname.
     * To determine the protocol, `req.protocol` is tried first.
     * If `trustProxy` is set, `X-Forwarded-Proto` header is used.
     * Otherwise, `req.socket.encrypted` is used.
     * To determine the hostname, `X-Forwarded-Host`
     * (if `trustProxy` is set) or `Host` header is used.
     */
    origin?: string;
    /**
     * Whether to trust `X-Forwarded-*` headers. `X-Forwarded-Proto`
     * and `X-Forwarded-Host` are used to determine the origin when
     * `origin` and `process.env.ORIGIN` are not set. `X-Forwarded-For`
     * is used to determine the IP address. The leftmost values are used
     * if multiple values are set. Defaults to true if `process.env.TRUST_PROXY`
     * is set to `1`, otherwise false.
     */
    trustProxy?: boolean;
    /**
     * Whether to call the next middleware in the chain even if the request
     * was handled. @default true
     */
    alwaysCallNext?: boolean;
}
interface NodePlatformInfo {
    name: "node";
    request: DecoratedRequest;
    response: ServerResponse;
}
/**
 * Creates a request handler to be passed to http.createServer() or used as a
 * middleware in Connect-style frameworks like Express.
 */
declare function createMiddleware(handler: HattipHandler, options?: NodeAdapterOptions): NodeMiddleware;
/**
 * Create an HTTP server
 */
declare function createServer(handler: HattipHandler, adapterOptions?: NodeAdapterOptions, serverOptions?: ServerOptions): Server;

export { DecoratedRequest as D, NodeAdapterOptions as N, createServer as a, NodeMiddleware as b, createMiddleware as c, NodePlatformInfo as d };
