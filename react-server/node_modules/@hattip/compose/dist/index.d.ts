import { AdapterRequestContext, HattipHandler } from '@hattip/core';

interface RequestContextExtensions {
}
/** App-local stuff */
interface Locals {
}
/**
 * Request context
 */
interface RequestContext extends AdapterRequestContext, RequestContextExtensions {
    /** Parsed request URL */
    url: URL;
    /** Request method */
    method: string;
    /** App-local stuff */
    locals: Locals;
    /** Call the next handler in the chain */
    next(): Promise<Response>;
    /** Redefine to handle errors by generating a response from an error */
    handleError(error: unknown): Response | Promise<Response>;
}
interface ResponseConvertible {
    toResponse(): Response | Promise<Response>;
}
type ResponseLike = Response | ResponseConvertible;
type MaybeRespone = ResponseLike | void;
type MaybeAsyncResponse = MaybeRespone | Promise<MaybeRespone>;
type RequestHandler = (context: RequestContext) => MaybeAsyncResponse;
type MaybeRequestHandler = false | null | undefined | RequestHandler;
type RequestHandlerStack = MaybeRequestHandler | RequestHandlerStack[];
type PartialHandler = (context: RequestContext) => Response | void | Promise<Response | void>;
declare function composePartial(handlers: RequestHandlerStack[], next?: () => Promise<Response>): PartialHandler;
declare function compose(...handlers: RequestHandlerStack[]): HattipHandler;

export { Locals, MaybeAsyncResponse, MaybeRequestHandler, MaybeRespone, PartialHandler, RequestContext, RequestContextExtensions, RequestHandler, RequestHandlerStack, ResponseConvertible, ResponseLike, compose, composePartial };
