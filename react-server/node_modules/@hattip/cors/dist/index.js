// src/index.ts
function cors(options = {}) {
  const defaults = {
    allowMethods: "GET,HEAD,PUT,POST,DELETE,PATCH",
    secureContext: false
  };
  options = {
    ...defaults,
    ...options
  };
  if (Array.isArray(options.exposeHeaders)) {
    options.exposeHeaders = options.exposeHeaders.join(",");
  }
  if (Array.isArray(options.allowMethods)) {
    options.allowMethods = options.allowMethods.join(",");
  }
  if (Array.isArray(options.allowHeaders)) {
    options.allowHeaders = options.allowHeaders.join(",");
  }
  const maxAge = options.maxAge && String(options.maxAge);
  return async function cors2(ctx) {
    const requestOrigin = ctx.request.headers.get("Origin");
    if (!requestOrigin) {
      const response2 = await ctx.next();
      response2.headers.append("Vary", "Origin");
      return response2;
    }
    let origin;
    if (typeof options.origin === "function") {
      origin = await options.origin(ctx);
      if (!origin)
        return;
    } else {
      origin = options.origin || requestOrigin;
    }
    let credentials;
    if (typeof options.credentials === "function") {
      credentials = options.credentials(ctx);
      if (credentials instanceof Promise)
        credentials = await credentials;
    } else {
      credentials = !!options.credentials;
    }
    const response = ctx.method === "OPTIONS" ? new Response(null, { status: 204 }) : await ctx.next();
    response.headers.append("Vary", "Origin");
    const headersSet = {};
    function set(key, value) {
      if (Array.isArray(value)) {
        for (const v of value) {
          response.headers.append(key, v);
        }
      } else {
        response.headers.set(key, value);
      }
      headersSet[key] = value;
    }
    if (ctx.method !== "OPTIONS") {
      set("Access-Control-Allow-Origin", origin);
      if (credentials === true) {
        set("Access-Control-Allow-Credentials", "true");
      }
      if (options.exposeHeaders) {
        set("Access-Control-Expose-Headers", options.exposeHeaders);
      }
      if (options.secureContext) {
        set("Cross-Origin-Opener-Policy", "same-origin");
        set("Cross-Origin-Embedder-Policy", "require-corp");
      }
    } else {
      if (!ctx.request.headers.get("Access-Control-Request-Method")) {
        return;
      }
      set("Access-Control-Allow-Origin", origin);
      if (credentials === true) {
        set("Access-Control-Allow-Credentials", "true");
      }
      if (maxAge) {
        set("Access-Control-Max-Age", String(options.maxAge));
      }
      if (options.privateNetworkAccess && ctx.request.headers.get("Access-Control-Request-Private-Network")) {
        set("Access-Control-Allow-Private-Network", "true");
      }
      if (options.allowMethods) {
        set("Access-Control-Allow-Methods", options.allowMethods);
      }
      if (options.secureContext) {
        set("Cross-Origin-Opener-Policy", "same-origin");
        set("Cross-Origin-Embedder-Policy", "require-corp");
      }
      let allowHeaders = options.allowHeaders || null;
      if (!allowHeaders) {
        allowHeaders = ctx.request.headers.get(
          "Access-Control-Request-Headers"
        );
      }
      if (allowHeaders) {
        set("Access-Control-Allow-Headers", allowHeaders);
      }
    }
    return response;
  };
}
export {
  cors
};
